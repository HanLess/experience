思路：
从1位起，将数插入到前面排好序的数列中合适的位置，对于近乎有序的数组效率很高

复杂度：O(n^2)

var my = function(arr){
    // 第一层循环，需要插入的数
    for(let i = 1;i < arr.length;i ++){
    
        // 将 i 位的数字，插入到前面的有序数列中
        // 第二层，在此位置前的数列中，找到应该插入的位置
        for(let j = i;j > 0;j--){
            if(arr[j] < arr[j-1]){
                let t = arr[j-1]
                arr[j-1] = arr[j]
                arr[j] = t
            }else{
                break;
            }
        }
    }

    return arr
}

插入排序改进：

var my = function(arr){
    // 第一层循环，需要插入的数
    for(let i = 1;i < arr.length;i ++){
        
        // 记录当前需要插入的数字，逐个向前比较，找出需要插入的位置，即 j 并赋值，这里减少了数组换位，继而提升速度
        // 第二层，在此位置前的数列中，找到应该插入的位置
        var value = arr[i]
        var j
        
        for(j = i;j > 0;j--){
            if(arr[j-1] > value){
                arr[j] = arr[j-1]
            }else{
                break;
            }
        }
        arr[j] = value

    }

    return arr
}
