前序遍历：先遍历根节点（自身），再依次遍历左右子树
中序遍历：先遍历左子树，再遍历自身，再遍历右子树
后续遍历：先遍历左右子树，再遍历自身

二分搜索树的中序遍历 key 值，并依次返回，会将key值从小到大排序

二叉树的释放，应该使用后续遍历，即先释放左右子树，再释放自身

var before = function(obj){
    if(obj !== undefined && obj.key !== undefined){
        arr.push(obj['key'])
        before(obj['left'])
        before(obj['right'])
    }
}

var middle = function(obj){
    if(obj !== undefined && obj.key !== undefined){
        middle(obj['left'])
        arr.push(obj['key'])
        middle(obj['right'])
    }
}

var after = function(obj){
    if(obj !== undefined && obj.key !== undefined){
        after(obj['left'])
        after(obj['right'])
        arr.push(obj['key'])
    }
}

逐层遍历：需要一个数据结构（队列，先进先出，后进后出）辅助
