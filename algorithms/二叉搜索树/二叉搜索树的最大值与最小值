找到搜索二叉树的最大值：从根节点开始，向下递归找右子树的key，若没有右子树，则返回此节点的key值，就是最大的key值

var Max = function(obj){
    if(obj){
        if(obj['right']){
            return Max(obj['right'])
        }else{
            return obj['key']
        }
    }else{
        return 'the root is null'
    }
}

找到搜索二叉树的最小值：从根节点开始，向下递归找左子树的key，若没有左子树，则返回此节点的key值，就是最小的key值

var Min = function(obj){
    if(obj){
        if(obj['left']){
            return Min(obj['left'])
        }else{
            return obj['key']
        }
    }else{
        return 'the root is null'
    }
}

删除二叉搜索树的最大值，向右子树递归寻找最大值

var delMax = function(obj){
    if(obj){
        if(obj['right']){
            // 有右子树，递归
            obj['right'] = delMax(obj['right'])
            return obj
        }else{
            // 没有右子树
            if(obj['left']){
                // 有左子树，此节点引用左子树对象
                obj = obj['left']
                return obj
            }else{
                // 没有左子树，删除此节点（最大），即设为undefined
                return undefined
            }
        }
    }
}

删除二叉搜索树最小节点与删除最大节点类似
